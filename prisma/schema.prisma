// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  phone     String @unique
  email     String @unique
  password  String
  address   String
  role      Role   @default(user)
  status    Status @default(active)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart Cart?

  @@map("users")
}

model Product {
  id       String @id @default(uuid())
  name     String
  price    Float
  quantity Int
  brandId  String
  brand    Brand  @relation(fields: [brandId], references: [id])

  image       String
  features    Json?
  description String @db.Text()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId    String
  category      ProductCategory     @relation(fields: [categoryId], references: [id])
  subcategoryId String?
  subcategory   ProductSubcategory? @relation(fields: [subcategoryId], references: [id])
  cartItems     CartItem[]

  @@map("products")
}

// model Brand {
//   id   String @id @default(uuid())
//   name String @unique

//   createdAt  DateTime         @default(now())
//   updatedAt  DateTime         @updatedAt
//   Product    Product[]
//   categoryId String?
//   category   ProductCategory? @relation(fields: [categoryId], references: [id])

//   @@map("brands")
// }

// model ProductCategory {
//   id   String @id @default(uuid())
//   name String @unique

//   createdAt          DateTime             @default(now())
//   updatedAt          DateTime             @updatedAt
//   productSubcategory ProductSubcategory[]
//   products           Product[]
//   brands             Brand[]

//   @@map("categories")
// }

model Brand {
  id         String          @id @default(uuid())
  name       String          @unique
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  Product    Product[]
  categories BrandCategory[]

  @@map("brands")
}

model ProductCategory {
  id                 String               @id @default(uuid())
  name               String               @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  productSubcategory ProductSubcategory[]
  products           Product[]
  brands             BrandCategory[]

  @@map("categories")
}

model BrandCategory {
  brandId    String
  categoryId String
  brand      Brand           @relation(fields: [brandId], references: [id], onDelete: Cascade)
  category   ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([brandId, categoryId])
  @@map("brand_categories")
}

model ProductSubcategory {
  id   String @id @default(uuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId String
  category   ProductCategory @relation(fields: [categoryId], references: [id])
  products   Product[]

  @@map("subcategories")
}

model Cart {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[]

  @@map("carts")
}

model CartItem {
  id        String  @id @default(uuid())
  quantity  Int
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

enum Role {
  user
  admin
}

enum Status {
  active
  inactive
  disabled
}
